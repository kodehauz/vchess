<?php

/**
 * @file
 * Implements automatic tests for the Vchess module.
 */


class VChessTestCase extends DrupalWebTestCase {
  protected $privileged_user;
  
  public static function getInfo() {
    // Note: getInfo() strings are not translated with t().
    return array(
        'name' => 'VChess tests',
        'description' => 'Ensure that VChess functions properly.',
        'group' => 'VChess',
    );
  }
  
  function setUp() {
    parent::setUp('vchess');
  }

  /**
   * Test initial board setup
   */
  public function testVChessInitialBoardSetup() {
    $game = new Game();
    
    $this->assertEqual($game->position(), BOARD_DEFAULT, 
        "Check that the initial board setup is the standard initial position");
  }
  
  /**
   * A basic promotion test 
   */
  public function testVChessPromotion() {
    $game = new Game();
        
    $game->setup_position("r3k3/1P6/8/8/8/8/8/4K3");
    $game->set_players(1, 1);
    
    $game->make_move(1, "Pb7xRa8=Q");
    
    $this->assertEqual($game->position(), "Q3k3/8/8/8/8/8/8/4K3");
  }
  
  /**
   * Test checkmate
   */
  public function testVChessCheckmate() {
    $game = new Game();
    
    $game->setup_position("3qk3/8/8/8/2B5/5Q2/8/4K3");
    
    // White queen delivers checkmate on f7 protected by a bishop on c4 
    $game->make_move(1, "Qf3-f7");
    
    $this->assertTrue($game->is_checkmate('b'), 
      "This should be checkmate from the queen protected by a bishop");
  }
  
  /**
   * Test check with piece that can capture checking piece
   */
  public function testVChessCheckedPieceCapture() {
    $game = new Game();
    
    $game->setup_position("2bk4/5Q2/8/4N3/8/8/8/4K3");
    $game->make_move(1, "Qf7-d7");
    
    $this->assertFalse($game->is_checkmate('b'), 
       "Bishop should be able to capture queen so it should not be checkmate");
  }
  
  /**
   * Test a move with check
   */
  public function testVChessCheck() {
    $game = new Game();
    
    $game->setup_position("rnbqkbnr/ppppp1pp/8/5p2/4P3/8/PPPP1PPP/RNBQKBNR");
  
    $game->make_move(1, "Qd1-h5");
  
    $this->assertTrue($game->is_check('b'), "King should be in check");
    $this->assertEqual($game->turn(), 'b', "It should now be black's turn");
  }
  
  /** 
   * Test short castling
   */
  public function testVChessShortCastling() {
    $game = new Game();
    
    $game->setup_position("4k3/8/8/8/8/8/5PPP/4K2R");
    
    $game->make_move(1, "Ke1-g1");
    $this->assertEqual($game->position(), "4k3/8/8/8/8/8/5PPP/5RK1",
        "Check position after white king has castled kingside: " . $game->position());
  }
  
  /**
   * Test en passant
   */
  public function testVChessEnPassant() {
    $game = new Game();
    
    $game->make_move(1, "Pe2-e4");  // 1. e4
    $game->make_move(1, "Nb8-c6");  // 1. ... Nc6
    $game->make_move(1, "Pe4-e5");  // 2. e5
    $game->make_move(1, "Pd7-d5");  // 2. ... d5
    $game->make_move(1, "Pe5-d6");  // 3. exd6
    
    $this->assertEqual($game->position(), "r1bqkbnr/ppp1pppp/2nP4/8/8/8/PPPP1PPP/RNBQKBNR",
        "Check board after en passant capture: " . $game->position());
    $this->assertEqual($game->last_move()->algebraic(), "exd6", 
        "Check en passant algebraic move: " . $game->last_move()->algebraic());
  }
  
  /**
   * Test stalemate handling
   */
  public function testVChessStalemateHandling() {
    $game = new Game();
    
    $game->setup_position("4k3/R7/3Q5/8/8/8/8/4K3");
    $this->assertEqual($game->status(), STATUS_IN_PROGRESS, 
        "Check game is in progress before stalemate move");

    $game->make_move(1, "Ra7-b7");

    $this->assertEqual($game->status(), STATUS_DRAW, 
        "Check game is drawn after stalemate move");
  }
}